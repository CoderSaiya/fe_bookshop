// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?    // For credentials authentication
  phone         String?
  address       String?
  role          UserRole   @default(CUSTOMER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Book Shop Models
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  nameVi      String?  // Vietnamese name
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Author {
  id          String   @id @default(cuid())
  name        String
  nameVi      String?  // Vietnamese name
  bio         String?
  image       String?
  nationality String?
  birthDate   DateTime?
  books       BookAuthor[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("authors")
}

model Publisher {
  id          String   @id @default(cuid())
  name        String   @unique
  nameVi      String?  // Vietnamese name
  description String?
  website     String?
  address     String?
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("publishers")
}

model Book {
  id            String       @id @default(cuid())
  title         String
  titleVi       String?      // Vietnamese title
  isbn          String?      @unique
  description   String?
  descriptionVi String?      // Vietnamese description
  price         Float
  salePrice     Float?       // Discounted price
  coverImage    String?
  images        String[]     // Additional images
  pageCount     Int?
  language      String       @default("en")
  publishedDate DateTime?
  weight        Float?       // in grams
  dimensions    String?      // "length x width x height"
  stock         Int          @default(0)
  status        BookStatus   @default(ACTIVE)
  featured      Boolean      @default(false)
  
  // Relations
  categoryId    String
  category      Category     @relation(fields: [categoryId], references: [id])
  publisherId   String
  publisher     Publisher    @relation(fields: [publisherId], references: [id])
  authors       BookAuthor[]
  
  // Commerce relations
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("books")
}

model BookAuthor {
  id       String @id @default(cuid())
  bookId   String
  authorId String
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([bookId, authorId])
  @@map("book_authors")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
  @@map("cart_items")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Pricing
  subtotal        Float
  shippingCost    Float         @default(0)
  tax             Float         @default(0)
  total           Float
  
  // Shipping Information
  shippingAddress Json          // Store as JSON for flexibility
  billingAddress  Json?         // Optional separate billing address
  
  // Payment Information
  vnpayTxnRef     String?       // VNPay transaction reference
  vnpayOrderInfo  String?       // VNPay order info
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  bookId    String
  quantity  Int
  price     Float  // Price at time of order
  
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book      Book   @relation(fields: [bookId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  verified  Boolean  @default(false) // Verified purchase
  helpful   Int      @default(0)     // Helpful votes
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId]) // One review per user per book
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum BookStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  VNPAY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
